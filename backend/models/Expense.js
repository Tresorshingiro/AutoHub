const mongoose = require('mongoose')

const expenseSchema = new mongoose.Schema({
  referenceNumber: {
    type: String,
    unique: true
    // Will be auto-generated by pre-save hook
  },
  category: {
    type: String,
    enum: [
      'parts_purchase',
      'equipment',
      'utilities',
      'rent',
      'salaries',
      'insurance',
      'maintenance',
      'fuel',
      'marketing',
      'supplies',
      'other'
    ],
    required: true
  },
  supplierId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Supplier'
    // Not required - some expenses like utilities don't need a supplier
  },
  description: {
    type: String,
    required: true
  },
  amount: {
    type: Number,
    required: true,
    min: 0
  },
  paymentMethod: {
    type: String,
    enum: ['cash', 'bank_transfer', 'mobile_money', 'card', 'check', 'credit'],
    required: true
  },
  accountantId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee',
    required: true
  },
  employeeId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee'
    // Optional - for salary expenses, tracks which employee the expense is for
  },
  vehicleId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Vehicle'
    // Optional - for expenses related to specific vehicles/services
  },
  serviceId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Service'
    // Optional - for expenses related to specific services
  },
  date: {
    type: Date,
    default: Date.now
  },
  supplier: {
    type: String
    // Optional - supplier/vendor name as string
  },
  receiptNumber: {
    type: String
    // Optional - receipt or invoice number
  },
  receipt: {
    url: { type: String },
    publicId: { type: String }
  },
  notes: {
    type: String
  },
  status: {
    type: String,
    enum: ['pending', 'approved', 'paid'],
    default: 'paid'
  }
}, {
  timestamps: true
})

// Auto-generate reference number
expenseSchema.pre('save', async function(next) {
  if (!this.referenceNumber) {
    try {
      const year = new Date().getFullYear()
      const month = String(new Date().getMonth() + 1).padStart(2, '0')
      const day = String(new Date().getDate()).padStart(2, '0')
      
      // Use a simpler approach with timestamp to ensure uniqueness
      const timestamp = Date.now().toString().slice(-4)
      this.referenceNumber = `EXP-${year}${month}${day}-${timestamp}`
      
      console.log('Generated reference number:', this.referenceNumber)
    } catch (error) {
      console.error('Error generating reference number:', error)
      // Fallback: generate a simple reference number with timestamp
      this.referenceNumber = `EXP-${Date.now()}`
    }
  }
  next()
})

// Index for efficient queries (referenceNumber already indexed due to unique: true)
expenseSchema.index({ category: 1 })
expenseSchema.index({ supplierId: 1 })
expenseSchema.index({ date: -1 })
expenseSchema.index({ status: 1 })

module.exports = mongoose.model('Expense', expenseSchema)
